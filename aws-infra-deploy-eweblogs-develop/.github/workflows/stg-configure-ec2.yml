name: STG - Configure - EC2s
on:
  workflow_dispatch:
    inputs:
      InstallSQL:
        description: 'Install SQL'
        required: true
        type: choice
        default: 'true'
        options:
        - true
        - false

permissions:
  id-token: write
  contents: read

env:
  NAME_PREFIX: "STEUW2UPDATE_ME-"                                          # SQL Migration hostname prefix
  SQL_CU: "5037331"                                                        # SQL CU KB version
  BUILD_USER: "Admin"                                                      # Build User
  ENVIRONMENT_TYPE: "EM"                                                   # EN:England GPLive, NI:Northern Ireland, CM:CCMH, JY:Jersey, IM:Isle of Man, GI:Gibralta
  ENVIRONMENT: "stg"                                                       # Deployment Environment
  S3_SETUP_BUCKET_NAME: "stg-ew-plat-s3-adsetup-bucket-329248232378"       # Setup restore file bucket
  CROWDSTRIKE_INSTALL_PATH: "C:\\Agents\\Crowdstrike.exe"                  # Crowdstrike Installation Path
  NESSUS_INSTALL_PATH: "C:\\Agents\\NessusAgent.msi"                       # Nessus Installation Path
  PROXY_HOSTNAME: "185.46.212.92"                                          # Proxy Hostname
  PROXY_PORT: "443"                                                        # Proxy Port
  SQL_VERSION: "2019-Developer" #UPDATE_ME                                 # 2022-Developer/2019-Developer/2022-Standard/2019-Standard
  AWS_REGION: "eu-west-2"                                                  # AWS Region
  OU_PATH: "OU=SQL_Servers,OU=UPDATE_ME"                                   # Full OU Path for Servers

jobs:
  get_ssm_params:
    name: SSM_PARAMS 
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: stg
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}

      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}

      - id: ssm_retrieve
        shell: bash
        run: |
          set -e
          echo "DEFAULT_AD_SECRET_NAME=$(aws ssm get-parameter --name "/tf/output/DEFAULT_AD_SECRET_NAME" --output text --query Parameter.Value --with-decryption)" >> "$GITHUB_OUTPUT"
          echo "NETBIOS_NAME=$(aws ssm get-parameter --name "/tf/output/NETBIOS_NAME" --output text --query Parameter.Value --with-decryption)" >> "$GITHUB_OUTPUT"
          echo "AD_ADMIN_SECRET_NAME=$(aws ssm get-parameter --name "/tf/output/AD_ADMIN_SECRET_ID" --output text --query Parameter.Value --with-decryption)" >> "$GITHUB_OUTPUT"
          echo "DEFAULT_AD_SECRET_ID=$(aws ssm get-parameter --name "/tf/output/AD_DEFAULT_SECRET_ID" --output text --query Parameter.Value --with-decryption)" >> "$GITHUB_OUTPUT"
          echo "FULL_DOMAIN_NAME=$(aws ssm get-parameter --name "/tf/output/FULL_DOMAIN_NAME" --output text --query Parameter.Value --with-decryption)" >> "$GITHUB_OUTPUT"
    outputs:
      NAME_PREFIX: ${{ env.NAME_PREFIX }}
      FULL_DOMAIN_NAME: ${{ steps.ssm_retrieve.outputs.FULL_DOMAIN_NAME }}
      DEFAULT_AD_SECRET_NAME: ${{ steps.ssm_retrieve.outputs.DEFAULT_AD_SECRET_NAME }}
      NETBIOS_NAME: ${{ steps.ssm_retrieve.outputs.NETBIOS_NAME }}
      AD_ADMIN_SECRET_NAME: ${{ steps.ssm_retrieve.outputs.AD_ADMIN_SECRET_NAME }}
      DEFAULT_AD_SECRET_ID: ${{ steps.ssm_retrieve.outputs.DEFAULT_AD_SECRET_ID }}
      SQL_USER: "SQLService-UPDATE_ME"
      SQL_AGENT: "SQLAgent-UPDATE_ME"
      SQL_BROWSER: "SQLBrowser-UPDATE_ME"
      AUTHDBACCESS_USER: "SQLService-UPDATE_ME"

  map_instances_to_ad_group:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02"]
    needs: ["get_ssm_params"]
    runs-on: ["self-hosted", "stg"]
    steps:
      - name: Git config
        run: |
          git config --global core.longpaths true
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/sydney/add_instance_to_group
        with:
          instance_name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}
          ad_group_name: UPDATE_ME-db-computers"

  map_app_instances_to_ad_group:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["APP01","APP02"]
    needs: ["get_ssm_params"]
    runs-on: ["self-hosted", "stg"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/sydney/add_instance_to_group
        with:
          instance_name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}
          ad_group_name: "UPDATE_ME-app-computers"

  add_dd_perms:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    needs: ["get_ssm_params"]
    runs-on: ["self-hosted", "stg"]
    steps:
      - name: Git config
        run: |
          git config --global core.longpaths true
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/OB/dd_ad_update
        with:
          ad_group_name: "UPDATE_ME-app-computers"

  install_nessus:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ["self-hosted", "stg"]
    needs: ["get_ssm_params","add_dd_perms"]
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02","APP01","APP02"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_nessus
        uses: ./github-runner/actions/install_nessus
        with:
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ${{ matrix.hosts }}
          full-domain-name: ${{ needs.get_ssm_params.outputs.FULL_DOMAIN_NAME }}
          server-hostname: ""
          install-source: ${{ env.NESSUS_INSTALL_PATH }}
          key: ${{ secrets.NESSUS_KEY }}
          proxy-hostname: ${{ env.PROXY_HOSTNAME }}
          proxy-port: ${{ env.PROXY_PORT }}

  install_crowdstrike:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ["self-hosted", "stg"]
    needs: ["get_ssm_params", "install_nessus"]
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02","APP01","APP02"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_crowdstrike
        uses: ./github-runner/actions/install_crowdstrike
        with:
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ${{ matrix.hosts }}
          full-domain-name: ${{ needs.get_ssm_params.outputs.FULL_DOMAIN_NAME }}
          server-hostname: ""
          environment-type: ${{ env.ENVIRONMENT_TYPE }}
          server-type: "MGMT" #UPDATE_ME
          install-source: ${{ env.CROWDSTRIKE_INSTALL_PATH }}
          cid: ${{ secrets.CROWDSTRIKE_CID }}
          grouping-tag: "UPDATE_ME"

  install_datadog:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: ["get_ssm_params", "install_crowdstrike"]
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02","APP01","APP02"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_datadog
        uses: ./github-runner/actions/install_datadog
        with:
          server-name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}

  copy_sql_installers:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02"]
    needs: ["get_ssm_params", "install_datadog"]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Copy SQL installers
        run: |
            echo "Copying SQL Installers to DBs"
            NAME=${NAME_PREFIX^^}${PD_NUMBER^^}${HOST^^}
            S3BUCKET=${S3_SETUP_BUCKET_NAME}
            SQLVERSION=SQL-Installer-${SQL_VERSION}
            commandId=$(aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets '[{"Key":"tag:Name","Values":["'"$NAME"'"]}]' --parameters '{"commands":["$Destination_path = \"D:\\SQLInstallers\"","New-Item -Path \"$($Destination_path)\\SQL\" -Type Directory -Force","New-Item -Path \"$($Destination_path)\\CU\" -Type Directory -Force","Write-Host \"Copying SQL installers to $($Destination_path)\\SQL\"","Read-S3Object -BucketName '"$S3BUCKET"' -KeyPrefix '"$SQLVERSION"' -Folder \"$($Destination_path)\\SQL\"","Write-Host \"Copying SQL CU to $($Destination_path)\\CU\"","Read-S3Object -BucketName '"$S3BUCKET"' -KeyPrefix \"SQL-CU\" -Folder \"$($Destination_path)\\CU\""]}')
            sleep 180
        env:
          GH_TOKEN : ${{ secrets.RUNNER_BEARER_TOKEN }}
          HOST: ${{ matrix.hosts }}

  setup_sqlserver:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02"]
    needs: ["get_ssm_params", "copy_sql_installers"]
    runs-on: ["self-hosted", "stg"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/Nations/OB/sql_server #UPDATE_ME
        uses: ./github-runner/actions/OB/sql_server_2022    #UPDATE_ME
        with:
          full-domain-name: ${{ needs.get_ssm_params.outputs.FULL_DOMAIN_NAME }}
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ""
          server-hostname: "${{ matrix.hosts }}"
          pdou: ""
          authdbaccess-user: ${{ needs.get_ssm_params.outputs.AUTHDBACCESS_USER }}
          sql-user: ${{ needs.get_ssm_params.outputs.SQL_USER }}
          sql-agent: ${{ needs.get_ssm_params.outputs.SQL_AGENT }}
          sql-browser: ${{ needs.get_ssm_params.outputs.SQL_BROWSER }}
          sql-cu: ${{ env.SQL_CU }}
          build-user: ${{ env.BUILD_USER}}
          instance: "DB"
          netbios-name: ${{ needs.get_ssm_params.outputs.NETBIOS_NAME }}
          environment-type: "UPDATE_ME" # needs to match auth-app, auth-db and sql-admin group name
          default-secret-name: ${{ needs.get_ssm_params.outputs.DEFAULT_AD_SECRET_ID }}

  add_sql_logins:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    needs: ["get_ssm_params", "setup_sqlserver"]
    runs-on: ["self-hosted", "stg"]
    strategy:
      matrix:
        hosts:
          - name: "DBS01"
            instance: "DB"
            script: "Add_Datadog_SQL_User"
          - name: "DBS01"
            instance: "DB"
            script: "Add_SQLRead"
          - name: "DBS01"
            instance: "DB"
            script: "Add_SQLWrite"
          - name: "DBS02"
            instance: "DB"
            script: "Add_Datadog_SQL_User"
          - name: "DBS02"
            instance: "DB"
            script: "Add_SQLRead"
          - name: "DBS02"
            instance: "DB"
            script: "Add_SQLWrite"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/CCMH/add_sql_logins
        with:
          full-domain-name: ${{ needs.get_ssm_params.outputs.FULL_DOMAIN_NAME }}
          server-hostname: ${{ matrix.hosts.name }}
          script: "${{ matrix.hosts.script }}.sql"
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ""
          instance: ${{ matrix.hosts.instance }}
          netbios-name: ${{ needs.get_ssm_params.outputs.NETBIOS_NAME }}
          environment-name: ${{ env.ENVIRONMENT }}
          environment-type: "UPDATE_ME" # needs to match auth-app, auth-db and sql-admin group name

  sql_post_config:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02"]
    needs:  ["add_sql_logins", "get_ssm_params"]
    runs-on: ["self-hosted", "stg"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/PD/sql_post_config
        with:
          full-domain-name: ${{ needs.get_ssm_params.outputs.FULL_DOMAIN_NAME }}
          server-hostname: ""
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ${{ matrix.hosts }}

  start_remote_registry_service:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02"]
    needs: ["sql_post_config", "get_ssm_params"]
    runs-on: ["self-hosted", "stg"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/OB/start_remote_registry_service
        with:
          full-domain-name: ${{ needs.get_ssm_params.outputs.FULL_DOMAIN_NAME }}
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ${{ matrix.hosts }}

  Login_as_service_configuration:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02"]
    needs: ["start_remote_registry_service", "get_ssm_params"]
    runs-on: ["self-hosted", "stg"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/OB/Login_as_service_configuration/
        with:
          full-domain-name: ${{ needs.get_ssm_params.outputs.FULL_DOMAIN_NAME }}
          server-hostname: ""
          authdbaccess-user: ${{ needs.get_ssm_params.outputs.AUTHDBACCESS_USER }}
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ${{ matrix.hosts }}
          netbios-name: ${{ needs.get_ssm_params.outputs.NETBIOS_NAME }}

  configure_wsus:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: ["get_ssm_params","Login_as_service_configuration"]
    environment:
     name: stg
    strategy:
      matrix:
        hosts: ["APP01", "APP02"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: configure_wsus
        uses: ./github-runner/actions/configure_wsus
        with:
          server-name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}

  install_wsus:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: ["get_ssm_params", "configure_wsus"]
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["APP01", "APP02"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_wsus
        uses: ./github-runner/actions/install_wsus
        with:
          server-name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}

  configure_wsus_sql:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'  && github.event.inputs.InstallSQL == 'true'
    runs-on: ubuntu-latest
    needs: ["get_ssm_params","Login_as_service_configuration"]
    environment:
     name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: configure_wsus
        uses: ./github-runner/actions/configure_wsus
        with:
          server-name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}

  install_wsus_sql:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'  && github.event.inputs.InstallSQL == 'true'
    runs-on: ubuntu-latest
    needs: ["get_ssm_params", "configure_wsus_sql"]
    environment:
      name: stg
    strategy:
      matrix:
        hosts: ["DBS01","DBS02"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_wsus
        uses: ./github-runner/actions/install_wsus
        with:
          server-name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}