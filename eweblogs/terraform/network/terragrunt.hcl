locals {
  aws_region          = get_env("AWS_REGION")
  aws_account_id      = get_env("AWS_ACCOUNT_ID")
  env                 = get_env("ENVIRONMENT")
  service             = local.common.locals.service
  remote_identifier   = "eweblogs"
  identifier          = "network"
  remote_state_bucket = "${local.env}-${local.remote_identifier}-plat-s3-terraform-state-${local.aws_account_id}"
  state_lock_table    = "${local.env}-${local.remote_identifier}-plat-s3-terraform-locks-${local.aws_account_id}"
  remote_state_key    = "${local.identifier}/${local.env}-${local.remote_identifier}.tfstate"
  common              = read_terragrunt_config("${get_terragrunt_dir()}/../../../terragrunt/common.terragrunt.hcl")
  environment         = read_terragrunt_config("${get_terragrunt_dir()}/../../../terragrunt/${local.env}/environment.terragrunt.hcl")
}

# Terraform config generated by Terragrunt
generate "provider" {
  path      = "global_config.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
    github = {
      source  = "integrations/github"
      version = "~> 4.0"
    }
  }
}
provider "aws" {
  region              = "${local.aws_region}"
  allowed_account_ids = [
    "${local.aws_account_id}",
  ]
  default_tags {
    tags = {
      environment      = "${local.env}"
      service          = "${local.service}"
      owner            = "hosted-platforms"
      business_unit    = "primary-care"
      product          = "emis-web"
      service_location = "${local.common.locals.service_location}"
      account_state    = "0"
      programme_name   = "adelaide"
      project_name     = "brisbane"
      project_code     = "prj0011476"
      iac_source       = "terraform"
      dr               = "mission_critical"
      BackupClass      = "platinum"
    }
  }
}
provider "github" {}
EOF
}

remote_state {
  backend = "s3"
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite"
  }
  config = {
    bucket         = "${local.remote_state_bucket}"
    key            = "${local.remote_state_key}"
    region         = "${local.aws_region}"
    encrypt        = true
    dynamodb_table = "${local.state_lock_table}"
  }
}

inputs = merge(
  local.common.locals,
  local.environment.locals
)