# Resource Groups
resource "aws_resourcegroups_group" "ring1" {
  name = "${lower(var.wsus_rg_prefix)}_rg_wsus_ring_1"
  description = "Contains EC2 instances with a wsus tag of ring_1"

  resource_query {
    query = <<JSON
{
  "ResourceTypeFilters": [
    "AWS::EC2::Instance"
  ],
  "TagFilters": [
    {
      "Key": "wsus",
      "Values": ["ring_1"]
    }
  ]
}
JSON
  }
}

resource "aws_resourcegroups_group" "scan" {
  name = "${lower(var.wsus_rg_prefix)}_rg_wsus_scan_only"
  description = "Contains EC2 instances with a wsus tag of scan_only"

  resource_query {
    query = <<JSON
{
  "ResourceTypeFilters": [
    "AWS::EC2::Instance"
  ],
  "TagFilters": [
    {
      "Key": "wsus",
      "Values": ["scan_only"]
    }
  ]
}
JSON
  }
}

resource "aws_resourcegroups_group" "holding1" {
  name = "${lower(var.wsus_rg_prefix)}_rg_wsus_holding_ring_1"
  description = "Contains EC2 instances with a wsus tag of holding_ring_1"

  resource_query {
    query = <<JSON
{
  "ResourceTypeFilters": [
    "AWS::EC2::Instance"
  ],
  "TagFilters": [
    {
      "Key": "wsus",
      "Values": ["holding_ring_1"]
    }
  ]
}
JSON
  }
}

resource "aws_resourcegroups_group" "holding3" {
  name = "${lower(var.wsus_rg_prefix)}_rg_wsus_holding_ring_3"
  description = "Contains EC2 instances with a wsus tag of holding_ring_3"

  resource_query {
    query = <<JSON
{
  "ResourceTypeFilters": [
    "AWS::EC2::Instance"
  ],
  "TagFilters": [
    {
      "Key": "wsus",
      "Values": ["holding_ring_3"]
    }
  ]
}
JSON
  }
}

resource "aws_resourcegroups_group" "holding4" {
  name = "${lower(var.wsus_rg_prefix)}_rg_wsus_holding_ring_4"
  description = "Contains EC2 instances with a wsus tag of holding_ring_4"

  resource_query {
    query = <<JSON
{
  "ResourceTypeFilters": [
    "AWS::EC2::Instance"
  ],
  "TagFilters": [
    {
      "Key": "wsus",
      "Values": ["holding_ring_4"]
    }
  ]
}
JSON
  }
}

 ##### Documents

resource "aws_ssm_document" "wsus_install_updates" {
  name         = "EMIS-EWebLogs-WSUSInstallUpdates"
  document_type = "Command"
  content = jsonencode({
    schemaVersion = "2.2"
    description   = "WSUS install updates and reboot | Manual execution of WSUS patches to EWebLogs EC2 instances."

    mainSteps = [
      {
        action = "aws:runDocument",
        name   = "InstallWindowsUpdates",
        precondition = {
          StringEquals = [
            "platformType",
            "Windows",
          ]
        },
        inputs = {
          documentType = "SSMDocument",
          documentPath = "AWS-InstallWindowsUpdates",
          documentParameters = {
            Action = "Install",
            AllowReboot = "True"
          }
        }
      },
    ],
    parameters = {
      Action = {
        default = "Install",
        type = "string",
        allowedValues = ["Install"]
      },
      AllowReboot = {
        default = "True",
        type = "string",
        allowedValues = ["True"]
      }
    }
  })
}

resource "aws_ssm_document" "wsus_install_updates_noreboot" {
  name         = "EMIS-EWebLogs-WSUSInstallUpdatesNoReboot"
  document_type = "Command"
  content = jsonencode({
    schemaVersion = "2.2"
    description   = "WSUS install updates - No reboot | Manual execution of WSUS patches to EWebLogs EC2 instances, without any reboot."

    mainSteps = [
      {
        action = "aws:runDocument",
        name   = "InstallWindowsUpdates",
        precondition = {
          StringEquals = [
            "platformType",
            "Windows",
          ]
        },
        inputs = {
          documentType = "SSMDocument",
          documentPath = "AWS-InstallWindowsUpdates",
          documentParameters = {
            Action = "Install",
            AllowReboot = "False"
          }
        }
      },
    ],
    parameters = {
      Action = {
        default = "Install",
        type = "string",
        allowedValues = ["Install"]
      },
      AllowReboot = {
        default = "False",
        type = "string",
        allowedValues = ["False"]
      }
    }
  })
}

resource "aws_ssm_document" "wsus_checkupdates" {
  name         = "EMIS-EWebLogs-WSUSCheckForUpdates"
  document_type = "Command"
  content = jsonencode({
    schemaVersion = "2.2"
    description   = "WSUS check for updates | Performs a WSUS scan on EWebLogs EC2 instances for approved updates within the WSUS catalog."

    mainSteps = [
      {
        action = "aws:runDocument",
        name   = "ScanWindowsUpdates",
        precondition = {
          StringEquals = [
            "platformType",
            "Windows",
          ]
        },
        inputs = {
          documentType = "SSMDocument",
          documentPath = "AWS-InstallWindowsUpdates",
          documentParameters = {
            Action = "Scan",
            AllowReboot = "False"
          }
        }
      },
    ],
    parameters = {
      Action = {
        default = "Scan",
        type = "string",
        allowedValues = ["Scan"]
      },
      AllowReboot = {
        default = "False",
        type = "string",
        allowedValues = ["False"]
      }
    }
  })
}

resource "aws_ssm_document" "windows_wsus_settings" {
  name         = "EMIS-EWebLogs-WSUSConfigureClientSettings"
  document_type = "Command"
  content = jsonencode({
    schemaVersion = "2.2"
    description   = "Configure WSUS client | Sets the required WSUS configuration on EWebLogs client EC2 instances."
    mainSteps = [
      {
        action = "aws:runPowerShellScript"
        name   = "runPowerShellWSUS"
        precondition = {
          StringEquals = [
            "platformType",
            "Windows",
          ]
        },
        inputs = {
          runCommand = [
            "[string]$token = Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token-ttl-seconds' = '21600'} -Method PUT -Uri https://169.254.169.254/latest/api/token",
            "$az=(Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token' = $token} -Method GET -Uri http://169.254.169.254/latest/meta-data/placement/availability-zone)",
            "Write-Output \"EC2 is in AZ: $az\"",
            "if ((Get-WmiObject win32_computersystem).partofdomain -eq $false) {",
            "Write-Output \"EC2 in not a member of a Domain $DomainOutput\"}",
            "if ($az -eq 'eu-west-2a') {$wsusserverips = '{{WsusDownstream}}'} else {$wsusserverips = '{{WsusDownstream2}}'}",
            "Write-Output \"WSUS server is $wsusserverips\"",
            "$wsusprotocol = 'http://'",
            "$wsusport = ':8530'",
            "$wsusserver = $wsusprotocol+$wsusserverips+$wsusport",
            "Write-Output \"Setting WSUS server to $wsusserver\"",
            "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name WUServer -Value $wsusserver -force",
            "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name WUStatusServer -Value $wsusserver -force",
            "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name UseWUServer -Value 1 -force",
            "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name TargetGroupEnabled -Value 0 -force",
            "Write-Output \"Disabling DualScan\"",
            "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name DisableDualScan -Value 1 -force",
            "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name ActiveHours -Value 0 -force",
            "Write-Output \"Disabling ActiveHours\"",
            "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name ActiveHours -Value 0 -force",
            "Write-Output \"WUServer registry value: $WUServer\"",
            "$WUServer = Get-ItemPropertyValue 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name WUStatusServer",
            "Write-Output \"WUStatusServer registry value: $WUStatusServer\"",
            "$UseWUServer = Get-ItemPropertyValue 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name UseWUServer",
            "Write-Output \"TargetGroupEnabled registry value: $TargetGroupEnabled\"",
            "$TargetGroupEnabled = Get-ItemPropertyValue 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name TargetGroupEnabled",
            "Write-Output \"DisableDualScan registry value: $DisableDualScan\"",
            "$DisableDualScan = Get-ItemPropertyValue 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name DisableDualScan",
            "Write-Output \"ActiveHours registry value: $ActiveHours\"",
            "Restart-Service -Name 'wuauserv' -Force",
            "Write-Output \"Waiting for Windows Update service to start gracefully.\"",
            "Start-Sleep -Seconds 5",
            "$WUStatus = (Get-Service -Name wuauserv).status",
            "Write-Output \"Windows Update service status is $WUStatus\"",
            "Write-Output \"Script ran successfully to configure client\"",
            "Write-Output \"Running AWS-InstallWindowsUpdates to scan for updates\""
          ]
        }
      },
      {
        action = "aws:runDocument",
        name   = "ScanWindowsUpdates",
        inputs = {
          documentType = "SSMDocument",
          documentPath = "AWS-InstallWindowsUpdates",
          documentParameters = {
            Action = "Scan",
            AllowReboot = "False"
          }
        }
      }
    ],
    parameters = {
      Action = {
        default = "Scan",
        type = "string",
        allowedValues = ["Scan"]
      },
      AllowReboot = {
        default = "False",
        type = "string",
        allowedValues = ["False"]
      },
      WsusDownstream = {
        default = "IP or FQDN",
        type = "string"
      },
      WsusDownstream2 = {
        default = "IP or FQDN",
        type = "string"
      }
    }
  })
}

resource "aws_ssm_document" "wsus_tag" {
  name         = "EMIS-EWebLogs-WSUSApplyTagAssignment"
  document_type = "Command"
  content = jsonencode({
    schemaVersion = "2.2"
    description   = "Update 'wsus' tag | Updates 'wsus' tag to match between live patching and paused patching. Use 'holding_ring_*' to pause patching."

    mainSteps = [
      {
        action = "aws:runPowerShellScript"
        name   = "runPowerShellWSUS"
        precondition = {
          StringEquals = [
            "platformType",
            "Windows",
          ]
        },
        inputs = {
          runCommand = [
            "$ids = Get-EC2Instance -Filter @{@{name='tag:wsus'; values='{{ExistingTag}}'}} | Select-Object -ExpandProperty Instances",
            "$InstanceIds = $ids.InstanceId",
            "Write-Host 'Instances to update:'",
            "Get-EC2Tag -Filter @{@{name='resource-type';values='instance'};@{name='tag:wsus'; values='{{ExistingTag}}'}} | Select-Object ResourceId, @{name='wsus tag';Expression={$PSItem.Value}} | Format-Table -AutoSize",
            "$tag = New-Object Amazon.EC2.Model.Tag",
            "$tag.Key = 'wsus'",
            "$tag.Value = '{{NewTag}}'",
            "foreach ($InstanceId in $InstanceIds) {New-EC2Tag -Resource $InstanceId -Tag $tag}",
            "Get-EC2Tag -Filter @{@{name='resource-type';values='instance'};@{name='tag:wsus'; values='{{NewTag}}'}} | Select-Object ResourceId, @{name='wsus tag';Expression={$PSItem.Value}} | Format-Table -AutoSize"
          ]
        },
        name = "retrievePowerShellScript"
      }
    ],
    parameters = {
      ExistingTag = {
        default = "ring_*",
        description = "The existing 'wsus' tag value to replace.",
        type = "String"
      },
      NewTag = {
        default = "holding_ring_*",
        description = "The new 'wsus' tag value to.",
        type = "String"
      }
    }
  })
}

module "s3_logs_bucket" {
  # checkov:skip=CKV_TF_1: "Ensure Terraform module sources use a commit hash"
  source = "git::https://github.com/emisgroup/terraform-aws-s3.git?ref=v1.0.2"

  bucket = "${var.environment}-eweblogs-plat-s3-wsus-logs-${data.aws_caller_identity.current.account_id}"

  force_destroy = true

  attach_deny_insecure_transport_policy = true
  attach_require_latest_tls_policy      = true

  block_public_acls       = true
  block_public_policy     = true  
  ignore_public_acls      = true
  restrict_public_buckets = true

  versioning = {
    status     = true
    mfa_delete = false
  }
}