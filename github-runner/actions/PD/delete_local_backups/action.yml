name: delete_local_backups
description: Removes backs from D:\backups\DBA
inputs:
  server-name:
    description: "Server to remove backup files from"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Download module
      run: |
        echo "Downloading module."
        instanceId=$(aws ec2 describe-instances --filters 'Name=tag:Name,Values=${{ inputs.server-name }}' 'Name=instance-state-name,Values=running' --query 'Reservations[].Instances[].[InstanceId]' --output text)
        commands=(
            '$backup_path = "D:\Backups\DBA"'
            '# List of backup files to delete'
            '$backupFiles = @('
            '"$backup_path\MKBRuntime.bak",'
            '"$backup_path\EMISExternalMessaging.bak",'
            '"$backup_path\EMISMonitoring.bak",'
            '"$backup_path\EMISScheduler.bak",'
            '"$backup_path\EMISEmail.bak",'
            '"$backup_path\EMISWebCRTest.bak",'
            '"$backup_path\EMISState.bak",'
            '"$backup_path\EMISWebDocTest.bak",'
            '"$backup_path\EMISConnectCatalogue.bak",'
            '"$backup_path\EMISConnectDistributed.bak",'
            '"$backup_path\EMISConnectMonitoring.bak",'
            '"$backup_path\EMISHubMonitoring.bak",'
            '"$backup_path\EMISIdentityMonitoring.bak",'
            '"$backup_path\EMISIndex.bak",'
            '"$backup_path\EMISIndexMonitoring.bak",'
            '"$backup_path\IdentityServer.bak"'
            ')'
            '# Delete the backup files if they exist'
            'foreach ($backupFile in $backupFiles) {'
            'if (Test-Path -Path $backupFile) {'
            'Remove-Item -Path $backupFile -Force'
            'Write-Output "Backup file $backupFile has been deleted."'
            '} else {'
            'Write-Output "Backup file $backupFile does not exist."'
            '}'
            '}'
        )
        commandsJson=$(printf '%s\n' "${commands[@]}" | jq -R . | jq -s .)
        commandId=$(aws ssm send-command --instance-ids $instanceId --document-name "AWS-RunPowerShellScript" --parameters "{\"commands\":$commandsJson}" --query 'Command.CommandId' --output text)

        # wait for local backup deletion SSM run command to complete
        command_status="starting"
        while [ $command_status != "Success" ]
        do
          echo "local backup deletion script still running"
          sleep 10
          command_status=$(aws ssm get-command-invocation --command-id $commandId --instance-id $instanceId --query 'Status' --output text)
          if [ $command_status = "Failed" ]
          then
            echo "local backup deletion script failed"
            aws ssm list-command-invocations --command-id $commandId --details --query "CommandInvocations[*].CommandPlugins[*].Output[]" --output text
            exit 1
          fi
        done
        echo "local backup deletion script completed successfully"
      shell: bash