#!/bin/bash
set -Eeo pipefail
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
LRED='\033[1;31m'
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

function check_aws_account() {
  aws sts get-caller-identity > /dev/null 2>&1 || { echo 'Unable to locate AWS credentials. Please setup credentials and try again' ; exit 1; }
}

function user_confirmation() {
  account_id="$(aws sts get-caller-identity | jq -r '.Account')"
  echo -e "  AWS Account: ${GREEN}${BOLD}${account_id}${NC}${NORMAL}"
  echo -e "  Region: ${GREEN}${BOLD}${region}${NC}${NORMAL}"
  echo -e "Press ${RED}${BOLD}<Ctrl>-<C>${NORMAL}${NC} to abort or ${GREEN}${BOLD}<Enter>${NORMAL}${NC} to continue…" >&2
  read -r
}

# Check if Terragrunt is installed
if ! command -v terragrunt &> /dev/null
then
    echo -e "${RED}${BOLD}Terragrunt is not installed. Please install it and try again.${NORMAL}${NC}"
    exit 1
fi

# Check if jq is installed
if ! command -v jq &> /dev/null
then
    echo -e "${RED}${BOLD}jq is not installed. Please install it and try again.${NORMAL}${NC}"
    exit 1
fi

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null
then
    echo -e "${RED}${BOLD}AWS CLI is not installed. Please install it and try again.${NORMAL}${NC}"
    exit 1
fi

# If all dependencies are installed, continue with the script
echo "All dependencies are installed."

if [ "$#" -lt 7 ]; then
  echo "Please provide values to all required arguments"
  echo -e "Usage: ${RED}${BOLD}setup <option> <env> <service> <service_location> <region> <github_repo> <stack_identifier>${NORMAL}${NC}"
  exit 2
fi

command="$1"
env="$2"
service="$3"
service_location="$4"
region="$5"
github_repo="$6"
identifier="$7"
business_unit="primary-care"
product="emis-web"
programme_name="adelaide"
project_name="brisbane"
project_code="prj0011476"

base_dir=$(dirname "$0")

if [[ $command == "bootstrap" ]]; then
  echo "Bootstrap IAM Role to use with GitHub workflows from https://github.com/emisgroup/${github_repo}"
else
  echo "Unsupported option"
  echo -e "Usage: ${RED}${BOLD}setup <option> <env> <service> <service_location> <region> <github_repo> <stack_identifier>${NORMAL}${NC}"
  echo -e "Allowed option values : ${GREEN}${BOLD}bootstrap${NORMAL}${NC}"
  exit 3
fi

if [[ $env == "sbx" || $env == "dev" || $env == "stg" || $env == "prd" ]]; then
  echo "Environment: $env"
else
  echo "Unsupported env"
  echo -e "Usage: ${RED}${BOLD}setup <option> <env> <service> <service_location> <region> <github_repo> <stack_identifier>${NORMAL}${NC}"
  echo -e "Allowed env values    : ${GREEN}${BOLD}sbx, dev, stg, prd${NORMAL}${NC}"
  exit 4
fi

case "$command" in
  bootstrap)
      destroy="${@: -1}"
      check_aws_account
      account_id="$(aws sts get-caller-identity | jq -r '.Account')"
      bucket="${env}-${service}-plat-s3-terraform-state-${account_id}"
      ddb="${env}-${service}-plat-s3-terraform-locks-${account_id}"
      key="github_role_${identifier}.tfstate"
      cd ${base_dir}/
      if [ -d ".terraform" ] || [ -f ".terraform" ]; then
        rm -r .terraform
      fi
      if [ -d ".terraform.lock.hcl" ] || [ -f ".terraform.lock.hcl" ]; then
        rm -r .terraform.lock.hcl
      fi
      if [ -f "global_config.tf" ]; then
        rm global_config.tf
      fi
      if [ -f "backend.tf" ]; then
        rm backend.tf
      fi
      echo "This script will run in"
      user_confirmation
      echo "locals {" > config.hcl
      echo "  aws_region             = \"${region}\"" >> config.hcl
      echo "  aws_account_id         = \"${account_id}\"" >> config.hcl
      echo "  service                = \"${service}\"" >> config.hcl
      echo "  service_location       = \"${service_location}\"" >> config.hcl
      echo "  business_unit          = \"${business_unit}\"" >> config.hcl
      echo "  product                = \"${product}\"" >> config.hcl
      echo "  programme_name         = \"${programme_name}\"" >> config.hcl
      echo "  project_name           = \"${project_name}\"" >> config.hcl
      echo "  project_code           = \"${project_code}\"" >> config.hcl
      echo "  environment            = \"${env}\"" >> config.hcl
      echo "  github_repo            = \"${github_repo}\"" >> config.hcl
      echo "  identifier             = \"${identifier}\"" >> config.hcl
      echo "  terraform_state_bucket = \"${bucket}\"" >> config.hcl
      echo "  terraform_lock_table   = \"${ddb}\"" >> config.hcl
      echo "  terraform_state_key    = \"${key}\"" >> config.hcl
      echo "}" >> config.hcl
      set -e
      if [[ "${destroy}" == "destroy" ]]; then
        echo
        echo -e "${GREEN}${BOLD}Destroying terraform resources. Do you want to continue ?${NC}${NORMAL}"
        echo -e "Press ${RED}${BOLD}<Ctrl>-<C>${NORMAL}${NC} to abort or ${GREEN}${BOLD}<Enter>${NORMAL}${NC} to continue…" >&2
        read -r
        terragrunt destroy -compact-warnings -auto-approve --terragrunt-config terragrunt.hcl --terragrunt-non-interactive
        exit
      fi
      terragrunt apply -compact-warnings -auto-approve --terragrunt-config terragrunt.hcl --terragrunt-non-interactive
      ;;
esac
set +e
