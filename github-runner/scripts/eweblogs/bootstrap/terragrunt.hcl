locals {
  config = read_terragrunt_config("config.hcl")
}

# Terraform config generated by Terragrunt
generate "provider" {
  path      = "global_config.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }

    github = {
      source  = "integrations/github"
      version = "~> 4.0"
    }
  }
}

provider "aws" {
  region              = "${local.config.locals.aws_region}"
  allowed_account_ids = [
    "${local.config.locals.aws_account_id}",
  ]
  default_tags {
    tags = {
      environment      = "${local.config.locals.environment}"
      service          = "${local.config.locals.service}"
      owner            = "hosted-platforms"
      business_unit    = "${local.config.locals.business_unit}"
      product          = "${local.config.locals.product}"
      service_location = "${local.config.locals.service_location}"
      account_state    = "0"
      programme_name   = "${local.config.locals.programme_name}"
      project_name     = "${local.config.locals.project_name}"
      project_code     = "${local.config.locals.project_code}"
      iac_source       = "terraform"
      dr               = "mission_critical"
    }
  }
}

provider "github" {}

EOF
}

remote_state {
  backend = "s3"
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite"
  }
  config = {
    bucket         = "${local.config.locals.terraform_state_bucket}"
    key            = "${local.config.locals.terraform_state_key}"
    region         = "${local.config.locals.aws_region}"
    encrypt        = true
    dynamodb_table = "${local.config.locals.terraform_lock_table}"
  }
}

inputs = merge(
  local.config.locals,
)
