name: DEV - Configure - EC2s
on: workflow_dispatch

permissions:
  id-token: write
  contents: read

env:
  NAME_PREFIX: "DVEUW2EWL" # hostname prefix
  ENVIRONMENT_TYPE: "EM" # EN:England GPLive, NI:Northern Ireland, CM:CCMH, JY:Jersey, IM:Isle of Man, GI:Gibralta
  ENVIRONMENT: "dev" # Deployment Environment
  S3_SETUP_BUCKET_NAME: "dev-eweblogs-migration-plat-s3-setup-296062593024" # Setup restore file bucket
  CROWDSTRIKE_INSTALL_PATH: "C:\\Agents\\Crowdstrike.exe" # Crowdstrike Installation Path
  NESSUS_INSTALL_PATH: "C:\\Agents\\NessusAgent.msi" # Nessus Installation Path
  PROXY_HOSTNAME: "185.46.212.92" # Proxy Hostname
  PROXY_PORT: "443" # Proxy Port
  SQL_VERSION: "2022-Developer" #UPDATE_ME                                 # 2022-Developer/2019-Developer/2022-Standard/2019-Standard
  AWS_REGION: "eu-west-2" # AWS Region
  SQL_USER: "SQLService-EWL" # SQL Service Account

jobs:
  get_ssm_params:
    name: SSM_PARAMS
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}

      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}

      - id: ssm_retrieve
        shell: bash
        run: |
          set -e
          echo "AD_ADMIN_SECRET_ID=$(aws ssm get-parameter --name "/tf/output/AD_ADMIN_SECRET_ID" --output text --query Parameter.Value --with-decryption)" >> "$GITHUB_OUTPUT"
    outputs:
      AD_ADMIN_SECRET_ID: ${{ steps.ssm_retrieve.outputs.AD_ADMIN_SECRET_ID }}

  invoke_create_ou:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ["self-hosted", "dev"]
    environment:
      name: dev
    needs: ["get_ssm_params"]
    steps:
      - name: Git config
        run: |
          git config --global url."https://token:${GH_TOKEN}@github.com/emisgroup".insteadOf "https://github.com/emisgroup"
          git config --file=.gitmodules github-runner.url https://token:${GH_TOKEN}@github.com/emisgroup/github-runner.git
        env:
          GH_TOKEN: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: Call the pd_ad_action - updating the OU, Groups and Users
        uses: ./eweblogs/actions/ad_update
        with:
          pd-number: "ewl"
          default-secret-name: ${{ secrets.SS_DEFAULT_AD_SECRET_NAME }}
          environment-type: "ewl"
          authaccessgroup: "ewl-db-computers"
          service-account-prefix: "EWL"
          ou-structure: "OU=Service_Accounts,OU=EWL,OU=MGMT"

  spn_settings:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    runs-on: ["self-hosted", "dev"]
    needs: ["get_ssm_params", "invoke_create_ou"]
    environment:
      name: dev
    strategy:
      matrix:
        hosts: ["SIS01", "SRS01"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./eweblogs/actions/spn_settings_exa
        with:
          full-domain-name: ${{ secrets.FULL_DOMAIN_NAME }}
          sql-user: ${{ env.SQL_USER }}
          name-prefix: ${{ env.NAME_PREFIX }}
          admin-secret-arn: ${{ needs.get_ssm_params.outputs.AD_ADMIN_SECRET_ID }}
          server-suffix: ${{ matrix.hosts }}

  map_instances_to_ad_group:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    environment:
      name: dev
    needs: ["spn_settings"]
    runs-on: ["self-hosted", "dev"]
    strategy:
      matrix:
        hosts: ["SRS01", "SIS01"]
    steps:
      - name: Git config
        run: |
          git config --global core.longpaths true
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: run-actions
        uses: ./github-runner/actions/sydney/add_instance_to_group
        with:
          instance_name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}
          ad_group_name: "ewl-db-computers"

  install_nessus:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    runs-on: ["self-hosted", "dev"]
    needs: ["map_instances_to_ad_group"]
    environment:
      name: dev
    strategy:
      matrix:
        hosts: ["SRS01", "SIS01"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_nessus
        uses: ./github-runner/actions/install_nessus
        with:
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ${{ matrix.hosts }}
          full-domain-name: ${{ secrets.FULL_DOMAIN_NAME }}
          server-hostname: ""
          install-source: ${{ env.NESSUS_INSTALL_PATH }}
          key: ${{ secrets.NESSUS_KEY }}
          proxy-hostname: ${{ env.PROXY_HOSTNAME }}
          proxy-port: ${{ env.PROXY_PORT }}

  install_crowdstrike:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    runs-on: ["self-hosted", "dev"]
    needs: ["install_nessus"]
    environment:
      name: dev
    strategy:
      matrix:
        hosts:
          - name: "SRS01"
            server-type: "DB"
          - name: "SIS01"
            server-type: "DB"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_crowdstrike
        uses: ./github-runner/actions/install_crowdstrike
        with:
          name-prefix: ${{ env.NAME_PREFIX }}
          pd-number: ${{ matrix.hosts.name }}
          full-domain-name: ${{ secrets.FULL_DOMAIN_NAME }}
          server-hostname: ""
          environment-type: ${{ env.ENVIRONMENT_TYPE }}
          server-type: ${{ matrix.hosts.server-type }}
          install-source: ${{ env.CROWDSTRIKE_INSTALL_PATH }}
          cid: ${{ secrets.CROWDSTRIKE_CID }}
          grouping-tag: "eweblogs"

  install_dynatrace:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: ["install_crowdstrike"]
    environment:
      name: dev
    strategy:
      matrix:
        hosts: ["SRS01", "SIS01"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_dynatrace
        uses: ./github-runner/actions/install_dynatrace
        with:
          server-name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}
          cost-centre: "business-intelligence"
          product: "business-intelligence"

  copy_sql_installers:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    environment:
      name: dev
    strategy:
      matrix:
        hosts: ["SRS01", "SIS01"]
    needs: ["install_dynatrace"]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Copy SQL installers
        run: |
          echo "Copying SQL Installers to DBs"
          NAME=${NAME_PREFIX^^}${PD_NUMBER^^}${HOST^^}
          S3BUCKET=${S3_SETUP_BUCKET_NAME}
          SQLVERSION=SQL-Installer-${SQL_VERSION}
          commandId=$(aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets '[{"Key":"tag:Name","Values":["'"$NAME"'"]}]' --parameters '{"commands":["$Destination_path = \"D:\\SQLInstallers\"","New-Item -Path \"$($Destination_path)\\SQL\" -Type Directory -Force","New-Item -Path \"$($Destination_path)\\CU\" -Type Directory -Force","Write-Host \"Copying SQL installers to $($Destination_path)\\SQL\"","Read-S3Object -BucketName '"$S3BUCKET"' -KeyPrefix '"$SQLVERSION"' -Folder \"$($Destination_path)\\SQL\"","Write-Host \"Copying SQL CU to $($Destination_path)\\CU\"","Read-S3Object -BucketName '"$S3BUCKET"' -KeyPrefix \"SQL-CU\" -Folder \"$($Destination_path)\\CU\""]}')
          sleep 180
        env:
          GH_TOKEN: ${{ secrets.RUNNER_BEARER_TOKEN }}
          HOST: ${{ matrix.hosts }}

  copy_ssms_installers:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    environment:
      name: dev
    needs: ["install_dynatrace"]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Copy SSMS to Servers
        run: |
          echo "Copying SSMS to MGMT Server"
          NAME=${NAME_PREFIX^^}${PD_NUMBER^^}${HOST^^}
          S3BUCKET=${S3_SETUP_BUCKET_NAME}
          commandId=$(aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets '[{"Key":"tag:Name","Values":["'"$NAME"'"]}]' --parameters '{"commands":["$Destination_path = \"C:\\\\Installers\"","New-Item -Path \"$($Destination_path)\\\\SSMS\" -Type Directory -Force","Write-Host \"Copying SSMS installer to $($Destination_path)\\\\SSMS\"","Read-S3Object -BucketName '"$S3BUCKET"' -Key 'SSMS-Setup-ENU.exe' -File \"$($Destination_path)\\\\SSMS\\\\SSMS-Setup-ENU.exe\""]}')
          sleep 180
        env:
          GH_TOKEN: ${{ secrets.RUNNER_BEARER_TOKEN }}
          HOST: "MGT001"

  configure_wsus:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: ["copy_sql_installers"]
    environment:
      name: dev
    strategy:
      matrix:
        hosts: ["SRS01", "SIS01"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ vars.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: configure_wsus
        uses: ./github-runner/actions/sydney/configure_wsus
        with:
          server-name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}
          server-fqdn-A: "DVEUW2WSUSDST01.${{ secrets.FULL_DOMAIN_NAME }}"
          server-fqdn-B: "DVEUW2WSUSDST02.${{ secrets.FULL_DOMAIN_NAME }}"

  install_wsus:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: ["configure_wsus"]
    environment:
      name: dev
    strategy:
      matrix:
        hosts: ["SRS01", "SIS01"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYER_ROLE_ARN }}
          role-session-name: deploy-role-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: navikt/github-app-token-generator@v1.2.0
        id: get-token
        with:
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RUNNER_BEARER_TOKEN }}
      - name: install_wsus
        uses: ./github-runner/actions/install_wsus
        with:
          server-name: ${{ env.NAME_PREFIX }}${{ matrix.hosts }}